#+TITLE: Arnes literate Emacs config
#+STARTUP: content

* Introduction
** This file
This is my literate emacs configuration. It's largley based on [[https://www.lucacambiaghi.com/vanilla-emacs/readme.html][Lucas's]].

** How to tangle
Run the following command to generate the emacs-lisp code:
#+begin_src shell
emacs --batch --eval "(require 'org)" --eval '(org-babel-tangle-file "emacs.org")'
#+end_src

* early-init.el and init.el
** early-init.el
Taken from DOOM's early init
#+begin_src emacs-lisp :tangle early-init.el
;;; early-init.el --- Early Init File -*- lexical-binding: t; no-byte-compile: t -*-

;; Defer garbage collection further back in the startup process
(setq gc-cons-threshold most-positive-fixnum
      gc-cons-percentage 0.6)

;; In Emacs 27+, package initialization occurs before `user-init-file' is
;; loaded, but after `early-init-file'. Doom handles package initialization, so
;; we must prevent Emacs from doing it early!
(setq package-enable-at-startup nil)
;; Do not allow loading from the package cache (same reason).
(setq package-quickstart nil)

;; Prevent the glimpse of un-styled Emacs by disabling these UI elements early.
(push '(menu-bar-lines . 0) default-frame-alist)
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)

;; Resizing the Emacs frame can be a terribly expensive part of changing the
;; font. By inhibiting this, we easily halve startup times with fonts that are
;; larger than the system default.
(setq frame-inhibit-implied-resize t)

;; Disable GUI elements
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(setq inhibit-splash-screen t)
(setq use-file-dialog nil)

;; Prevent unwanted runtime builds in gccemacs (native-comp); packages are
;; compiled ahead-of-time when they are installed and site files are compiled
;; when gccemacs is installed.
(setq comp-deferred-compilation nil)

;;; early-init.el ends here
#+end_src

** init.el: startup optimization
Taken from DOOM's init
#+begin_src emacs-lisp :tangle init.el
;;; init.el --- Personal configuration file -*- lexical-binding: t; no-byte-compile: t; -*-

;; `file-name-handler-alist' is consulted on every `require', `load' and various
;; path/io functions. You get a minor speed up by nooping this. However, this
;; may cause problems on builds of Emacs where its site lisp files aren't
;; byte-compiled and we're forced to load the *.el.gz files (e.g. on Alpine)
(unless (daemonp)
  (defvar doom--initial-file-name-handler-alist file-name-handler-alist)
  (setq file-name-handler-alist nil)
  ;; Restore `file-name-handler-alist' later, because it is needed for handling
  ;; encrypted or compressed files, among other things.
  (defun doom-reset-file-handler-alist-h ()
    ;; Re-add rather than `setq', because changes to `file-name-handler-alist'
    ;; since startup ought to be preserved.
    (dolist (handler file-name-handler-alist)
      (add-to-list 'doom--initial-file-name-handler-alist handler))
    (setq file-name-handler-alist doom--initial-file-name-handler-alist))
  (add-hook 'emacs-startup-hook #'doom-reset-file-handler-alist-h)
  (add-hook 'after-init-hook '(lambda ()
                                 ;; restore after startup
                                 (setq gc-cons-threshold 16777216
                                       gc-cons-percentage 0.1)))
  )
;; Ensure Doom is running out of this file's directory
(setq user-emacs-directory (file-truename (file-name-directory load-file-name)))
#+end_src

* Package manager
#+begin_src emacs-lisp :tangle init.el
;; Make =use-package= use straight by default
(setq straight-use-package-by-default t)
;; Minimal clones
(setq straight-vc-git-default-clone-depth 1)
(setq straight-recipes-gnu-elpa-use-mirror t)
;; Optimize startup time by skipping the modifications check
(setq straight-check-for-modifications nil)
;; Always defer t
(setq use-package-always-defer t)

;; Taken from straight.el documentation
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

;; Install use-package
(straight-use-package 'use-package)

;; This is a variable that has been renamed but straight still refers when
;; doing :straight (:no-native-compile t)
(setq comp-deferred-compilation-black-list nil)
#+end_src

* Future work

** Roadmap
*** TODO Install evil
*** TODO Configure font
*** TODO Install magit
*** TODO Install bespoke-theme
[[https://github.com/mclear-tools/bespoke-themes]]
*** TODO Install bespoke-modeline
[[https://github.com/mclear-tools/bespoke-modeline]]

** Cool emacs configs
- [[https://www.lucacambiaghi.com/vanilla-emacs/readme.html]]
- [[https://github.com/mclear-tools/dotemacs]]
- [[https://github.com/Artawower/.doom]]
- [[https://github.com/rougier/nano-emacs]]
- [[https://github.com/natecox/dotfiles/blob/master/workspaces/shared/symlinks/emacs/.emacs.d/nathancox.org]]
