#+title: Arnes literate Emacs config
#+startup: content

* Introduction
** This file
This is my literate emacs configuration. It's largley based on [[https://www.lucacambiaghi.com/vanilla-emacs/readme.html][Lucas's]].
** Install emacs
*** macOS
#+begin_src shell
brew install emacs-plus@28 --with-xwidgets --with-nobu417-big-sur-icon
#+end_src
** How to tangle
Run the following command to generate the emacs-lisp code:
#+begin_src shell
emacs --batch --eval "(require 'org)" --eval '(org-babel-tangle-file "init.org")'
#+end_src

If you want to exclusively use this configuration, run emacs like this:
#+begin_src shell
emacs -Q --load init.el init.org
#+end_src
* Setup
** early-init.el
Taken from DOOM's early init
#+begin_src emacs-lisp :tangle early-init.el
;;; early-init.el --- Early Init File -*- lexical-binding: t; no-byte-compile: t -*-

;; Defer garbage collection further back in the startup process
(setq gc-cons-threshold most-positive-fixnum
			gc-cons-percentage 0.6)

;; In Emacs 27+, package initialization occurs before `user-init-file' is
;; loaded, but after `early-init-file'. Doom handles package initialization, so
;; we must prevent Emacs from doing it early!
(setq package-enable-at-startup nil)
;; Do not allow loading from the package cache (same reason).
(setq package-quickstart nil)

;; Prevent the glimpse of un-styled Emacs by disabling these UI elements early.
(push '(menu-bar-lines . 0) default-frame-alist)
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)

;; Resizing the Emacs frame can be a terribly expensive part of changing the
;; font. By inhibiting this, we easily halve startup times with fonts that are
;; larger than the system default.
(setq frame-inhibit-implied-resize t)

;; Disable GUI elements
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(setq inhibit-splash-screen t)
(setq use-file-dialog nil)

;; Prevent unwanted runtime builds in gccemacs (native-comp); packages are
;; compiled ahead-of-time when they are installed and site files are compiled
;; when gccemacs is installed.
(setq comp-deferred-compilation nil)

;;; early-init.el ends here
#+end_src
** init.el
Mostly taken from DOOM's init
#+begin_src emacs-lisp :tangle init.el
	;;; init.el --- Personal configuration file -*- lexical-binding: t; no-byte-compile: t; -*-

;; `file-name-handler-alist' is consulted on every `require', `load' and various
;; path/io functions. You get a minor speed up by nooping this. However, this
;; may cause problems on builds of Emacs where its site lisp files aren't
;; byte-compiled and we're forced to load the *.el.gz files (e.g. on Alpine)
(unless (daemonp)
	(defvar doom--initial-file-name-handler-alist file-name-handler-alist)
	(setq file-name-handler-alist nil)
	;; Restore `file-name-handler-alist' later, because it is needed for handling
	;; encrypted or compressed files, among other things.
	(defun doom-reset-file-handler-alist-h ()
		;; Re-add rather than `setq', because changes to `file-name-handler-alist'
		;; since startup ought to be preserved.
		(dolist (handler file-name-handler-alist)
			(add-to-list 'doom--initial-file-name-handler-alist handler))
		(setq file-name-handler-alist doom--initial-file-name-handler-alist))
	(add-hook 'emacs-startup-hook #'doom-reset-file-handler-alist-h)
	(add-hook 'after-init-hook '(lambda ()
																;; restore after startup
																(setq gc-cons-threshold 16777216
																			gc-cons-percentage 0.1)))
	)
;; Ensure Doom is running out of this file's directory
(setq user-emacs-directory (file-truename (file-name-directory load-file-name)))

;; Add nix home-manager path
(setenv "PATH" (concat "~/.nix-profile/bin:" (getenv "PATH")))
#+end_src
** Package manager
#+begin_src emacs-lisp :tangle init.el
;; Make =use-package= use straight by default
(setq straight-use-package-by-default t)
;; Minimal clones
(setq straight-vc-git-default-clone-depth 1)
(setq straight-recipes-gnu-elpa-use-mirror t)
;; Optimize startup time by skipping the modifications check
(setq straight-check-for-modifications nil)
;; Always defer t
(setq use-package-always-defer t)

;; Taken from straight.el documentation
(defvar bootstrap-version)
(let ((bootstrap-file
			 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
			(bootstrap-version 5))
	(unless (file-exists-p bootstrap-file)
		(with-current-buffer
				(url-retrieve-synchronously
				 "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
				 'silent 'inhibit-cookies)
			(goto-char (point-max))
			(eval-print-last-sexp)))
	(load bootstrap-file nil 'nomessage))

;; Install use-package
(straight-use-package 'use-package)

;; This is a variable that has been renamed but straight still refers when
;; doing :straight (:no-native-compile t)
(setq comp-deferred-compilation-black-list nil)
#+end_src
* Emacs
:PROPERTIES:
:header-args: :emacs-lisp :tangle init.el
:END:
** Sane defaults
#+begin_src emacs-lisp
(use-package emacs
	:init

	(setq inhibit-startup-screen t      ; Hide welcome screen
				initial-scratch-message nil   ; Clear scratch message
				sentence-end-double-space nil ; No . after double-space
				ring-bell-function 'ignore    ; No bell
				frame-resize-pixelwise t)     ; Resize frame pixelwise

	;; Hide "For information about GNU Emacs and the GNU system, type C-h C-a.". 
	(defun display-startup-echo-area-message ()
		"If it wasn't for this you'd be GNU/Spammed by now"
		(message ""))

	(setq user-full-name "Arne Bahlo"
				user-mail-address "hey@arne.me")

	;; Always allow 'y' instead of 'yes'.
	(defalias 'yes-or-no-p 'y-or-n-p)

	;; Default to utf-8 for all the things
	(set-charset-priority 'unicode)
	(setq locale-coding-system 'utf-8
				coding-system-for-read 'utf-8
				coding-system-for-write 'utf-8)
	(set-terminal-coding-system 'utf-8)
	(set-keyboard-coding-system 'utf-8)
	(set-selection-coding-system 'utf-8)
	(prefer-coding-system 'utf-8)
	(setq default-process-coding-system '(utf-8-unix . utf-8-unix))

	;; Write over selected text on input... like all modern editors do
	(delete-selection-mode t)

	;; Enable recent files mode.
	(recentf-mode t)
	(setq recentf-exclude `(,(expand-file-name "straight/build/" user-emacs-directory)
													,(expand-file-name "eln-cache/" user-emacs-directory)
													,(expand-file-name "etc/" user-emacs-directory)
													,(expand-file-name "var/" user-emacs-directory)))

	;; Don't want ESC as a modifier
	(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

	;; Don't persist a custom file, this bites me more than it helps
	(setq custom-file (make-temp-file "")) ; use a temp file as a placeholder
	(setq custom-safe-themes t)            ; mark all themes as safe, since we can't persist now
	(setq enable-local-variables :all)     ; fix =defvar= warnings

	;; Stop emacs from littering the file system with backup files
	(setq make-backup-files nil
				auto-save-default nil
				create-lockfiles nil)

	;; Follow symlinks
	(setq vc-follow-symlinks t)

	;; Don't show any extra window chrome
	(when (window-system)
		(tool-bar-mode -1)
		(toggle-scroll-bar -1))

	;; Enable winner mode globally for undo/redo window layout changes
	(winner-mode t)

	(show-paren-mode t)

	;; Less noise when compiling elisp
	(setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))
	(setq native-comp-async-report-warnings-errors nil)
	(setq load-prefer-newer t)

	;; Clean up the mode line
	(display-time-mode -1)
	(setq column-number-mode t)

	;; Use common convention for indentation by default
	(setq-default indent-tabs-mode t)
	(setq-default tab-width 2)
	)
#+end_src
** macOS
#+begin_src emacs-lisp
(use-package emacs
	:init

	(defun ab/is-macos? ()
		(eq system-type 'darwin))

	(when (ab/is-macos?)
		(setq mac-command-modifier 'super)   ; command as super
		(setq mac-option-modifier 'meta)     ; alt as meta
		(setq mac-control-modifier 'control) ; control as control
		)

	;; emacs-mac
	(when (fboundp 'mac-auto-operator-composition-mode)
		(mac-auto-operator-composition-mode) ; enables font ligatures
		(global-set-key [(s c)] 'kill-ring-save)
		(global-set-key [(s v)] 'yank)
		(global-set-key [(s x)] 'kill-region)
		(global-set-key [(s q)] 'kill-emacs)
		)
	)
#+end_src
** Garbage collector magic hack
Stolen from DOOM
#+begin_src emacs-lisp
(use-package gcmh
	:demand
	:config
	(gcmh-mode 1))
#+end_src
** No littering
#+begin_src emacs-lisp
(use-package no-littering
	:demand
	:config
	(with-eval-after-load 'recentf
		(add-to-list 'recentf-exclude no-littering-var-directory)
		(add-to-list 'recentf-exclude no-littering-etc-directory))
	)
#+end_src
* Visuals
:PROPERTIES:
:header-args: :emacs-lisp :tangle init.el
:END:
** Fonts
#+begin_src emacs-lisp
(use-package emacs
	:init

	(defcustom ab/default-font-family "PragmataPro Mono Liga"
		"Default font family"
		:type 'string
		:group 'ab)

	(defcustom ab/default-font-size 160
		"Font size"
		:type 'int
		:group 'ab)

	(defcustom ab/variable-pitch-font-family "Inter"
		"Variable pitch font family"
		:type 'string
		:group 'ab)

	(defcustom ab/variable-pitch-font-size 150
		"Font size"
		:type 'int
		:group 'ab)

	(set-face-attribute 'default nil
											:font ab/default-font-family
											:height ab/default-font-size)
	(set-face-attribute 'fixed-pitch nil
											:font ab/default-font-family
											:height ab/default-font-size)
	(set-face-attribute 'variable-pitch nil
											:font ab/variable-pitch-font-family
											:height ab/variable-pitch-font-size
											:weight 'regular)
	)
#+end_src
** Theme
#+begin_src emacs-lisp
;; (use-package base16-theme
;; :init (load-theme 'base16-unikitty-light t))
(use-package flucui-themes
	:init (load-theme 'flucui-light t))

;; See https://github.com/d12frosted/homebrew-emacs-plus#system-appearance-change
(defun ab/system-apply-theme (appearance)
	"Load theme, taking current system APPEARANCE into consideration."
	(mapc #'disable-theme custom-enabled-themes)
	(pcase appearance
		('light (progn
							(load-theme 'flucui-light t)))
		('dark (progn
						 (load-theme 'flucui-dark t)))))

(add-hook 'ns-system-appearance-change-functions #'ab/system-apply-theme)
#+end_src
** Modeline
#+begin_src emacs-lisp
(use-package doom-modeline
	:hook (after-init . doom-modeline-mode))
#+end_src
** Fancy titlebar for macOS
#+begin_src emacs-lisp
(use-package emacs
	:init
	(add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
	(add-to-list 'default-frame-alist '(ns-appearance . dark))
	(setq ns-use-proxy-icon  nil)
	(setq frame-title-format nil)
	)
#+end_src
* Keybindings
:PROPERTIES:
:header-args: :emacs-lisp :tangle init.el
:END:
** which-key
#+begin_src emacs-lisp
(use-package which-key
	:demand t
	:init
	(setq which-key-separator " ")
	(setq which-key-prefix-prefix "+")
	;; (setq which-key-idle-delay 0.5)
	:config
	(which-key-mode))
#+end_src
** general
#+begin_src emacs-lisp
(use-package general
	:demand t
	:config
	(general-evil-setup)

	(general-create-definer ab/leader-keys
		:states '(normal insert visual emacs)
		:keymaps 'override
		:prefix "SPC"
		:global-prefix "C-SPC")

	(general-create-definer ab/local-leader-keys
		:states '(normal visual)
		:keymaps 'override
		:prefix ","
		:global-prefix "SPC m")

	(ab/leader-keys
		"SPC" '(execute-extended-command :which-key "execute command")

		";" '(eval-expression :which-key "eval sexp")

		"b" '(:ignore t :which-key "buffer")
		"bd"  'kill-current-buffer

		"g" '(:ignore t :which-key "git") ;; magit
		"o" '(:ignore t :which-key "org") ;; org-mode
		"w" '(:ignore t :which-key "window")
	  )

	(ab/local-leader-keys
		:states 'normal
		"d" '(:ignore t :which-key "debug")
		"e" '(:ignore t :which-key "eval")
		"t" '(:ignore t :which-key "test")))
#+end_src
** evil
Set up evil mode.
#+begin_src emacs-lisp
(use-package evil
	:demand
	:general
	;; Split windows like vim
	(ab/leader-keys
		"wv" 'evil-window-vsplit
		"ws" 'evil-window-split)
	:init
	(setq evil-want-integration t)
	(setq evil-want-keybinding nil) ; Required for evil-collection
	(setq evil-want-C-u-scroll t)
	(setq evil-respect-visual-line-mode t)

	;; move to window when splitting
	(setq evil-split-window-below t)
	(setq evil-vsplit-window-right t)

	:config
	(evil-mode 1)

	;; don't move cursor after ==
	(defun ab/evil-dont-move-cursor (orig-fn &rest args)
		(save-excursion (apply orig-fn args)))
	(advice-add 'evil-indent :around #'ab/evil-dont-move-cursor)
	)
#+end_src

Make sure it works with org.
#+begin_src emacs-lisp
(use-package evil-org-mode
	:straight (evil-org-mode :type git :host github :repo "hlissner/evil-org-mode")
	:hook ((org-mode . evil-org-mode)
				 (org-mode . (lambda () 
											 (require 'evil-org)
											 (evil-normalize-keymaps)
											 (evil-org-set-key-theme '(textobjects))
											 (require 'evil-org-agenda)
											 (evil-org-agenda-set-keys))))
	)
#+end_src

Add evil-collection for evil magit and more.
#+begin_src emacs-lisp
(use-package evil-collection
	:after evil
	:demand
	:init
	(setq evil-collection-magit-use-z-for-folds nil)
	:config
	(evil-collection-init))
#+end_src

* Org
:PROPERTIES:
:header-args: :emacs-lisp :tangle init.el
:END:
** org-mode
#+begin_src emacs-lisp
(use-package org
	:hook ((org-mode . prettify-symbols-mode)
				 (org-mode . visual-line-mode)
				 (org-mode . variable-pitch-mode))
	:general
	(ab/leader-keys
		"o t" '(org-babel-tangle :wk "tangle")
		"o C" '(org-capture :wk "capture")
		)
	(ab/local-leader-keys
		:keymaps 'org-mode-map
		"a" '(org-archive-subtree :wk "archive subtree")
		"i" '(org-insert-structure-template :wk "insert src")
		"l" '(:ignore true :wk "link")
		"l l" '(org-insert-link :wk "insert link")
		"r" '(:ignore true :wk "todo")
		"t t" '(org-todo :wk "heading todo")
		"t s" '(org-schedule :wk "schedule")
		"t d" '(org-deadline :wk "deadline")
		)
	(org-mode-map
	 :states 'normal
	 "z i" '(org-toggle-inline-images :wk "inline images"))
	:init
	;; General settings
	(when (file-directory-p "~/org")
		(setq org-directory "~/org"
					org-default-notes-file "~/org/todo.org"
					))
	;; Do not put two spaces on the left
	(setq org-src-preserve-indentation t) 
	;; Hide emphasis markers
	(setq org-hide-emphasis-markers t)
	;; Custom ellipsis
	;;(setq org-ellipsis " ▾")
	;; Disable modules for faster startup
	(setq org-modules
				'(ol-docview
					org-habit))
	;; Replace - with • in lists
	(font-lock-add-keywords 'org-mode
													'(("^ *\\([-]\\) "
														 (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
	)
#+end_src
** org-journal
#+begin_src emacs-lisp
(use-package org-journal
	:general
	(ab/leader-keys
		"o j" '(org-journal-new-entry :wk "journal")
		)
	:config
	(setq org-journal-dir "~/org/journal")
	(setq org-journal-date-format "%d. %B %Y"))
#+end_src
** org-agenda
#+begin_src emacs-lisp
(use-package org
	:general
	(ab/leader-keys
		"o A" '(org-agenda :wk "agenda")
		)
	:init
	(setq org-agenda-files (list org-directory))
	)
#+end_src
** org-bullets
#+begin_src emacs-lisp
(use-package org-bullets
	:hook (org-mode . org-bullets-mode)
	)
#+end_src

** org-roam
If you get =No EmacSQL SQLite binary available, aborting=, make sure you have a C compiler installed.
#+begin_src emacs-lisp
;; (use-package emacsql-sqlite3)
;; (use-package org-roam
;; 	:init
;; 	(setq org-roam-v2-ack t)
;; 	(setq org-roam-directory (file-truename "~/Developer/GitHub/arnes-notes"))
;;   (org-roam-db-autosync-mode))
#+end_src
* Packages
:PROPERTIES:
:header-args: :emacs-lisp :tangle init.el
:END:
** magit
#+begin_src emacs-lisp
(use-package magit
	:general
	(ab/leader-keys
		"g b" 'magit-blame
		"g g" 'magit-status
		"g G" 'magit-status-here
		"g l" 'magit-log)
	(general-nmap
		:keymaps '(magit-status-mode-map
							 magit-stash-mode-map
							 magit-revision-mode-map
							 magit-process-mode-map
							 magit-diff-mode-map)
		"TAB" #'magit-section-toggle
		"<escape>" #'transient-quit-one)
	:init
	(setq magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
	(setq magit-log-arguments '("--graph" "--decorate" "--color"))
	(setq git-commit-fill-column 72)
	:config
	(evil-define-key* '(normal visual) magit-mode-map
		"zz" #'evil-scroll-line-to-center)
	)
#+end_src
** rainbow parenthesis
#+begin_src emacs-lisp
(use-package rainbow-delimiters
	:hook ((emacs-lisp-mode . rainbow-delimiters-mode)
				 (clojure-mode . rainbow-delimiters-mode))
	)
#+end_src

** mixed-pitch
#+begin_src emacs-lisp
(use-package mixed-pitch
	:hook
	(text-mode . mixed-pitch-mode))
#+end_src
** evil-org-mode
#+begin_src emacs-lisp
(use-package evil-org-mode
	:straight (evil-org-mode :type git :host github :repo "hlissner/evil-org-mode")
	:hook ((org-mode . evil-org-mode)
				 (org-mode . (lambda () 
											 (require 'evil-org)
											 (evil-normalize-keymaps)
											 (evil-org-set-key-theme '(textobjects))
											 (require 'evil-org-agenda)
											 (evil-org-agenda-set-keys))))
	:general
	(general-nmap
		:keymaps 'org-mode-map :states 'normal
		"RET"   #'+org/dwim-at-point)
	:init
																				; Taken from https://www.lucacambiaghi.com/vanilla-emacs/readme.html#h:FB4154EE-27F2-4B52-B0BB-5F95D7920EAD
	(defun +org/dwim-at-point (&optional arg)
		"Do-what-I-mean at point.
			If on a:
			- checkbox list item or todo heading: toggle it.
			- clock: update its time.
			- headline: cycle ARCHIVE subtrees, toggle latex fragments and inline images in
				subtree; update statistics cookies/checkboxes and ToCs.
			- footnote reference: jump to the footnote's definition
			- footnote definition: jump to the first reference of this footnote
			- table-row or a TBLFM: recalculate the table's formulas
			- table-cell: clear it and go into insert mode. If this is a formula cell,
				recaluclate it instead.
			- babel-call: execute the source block
			- statistics-cookie: update it.
			- latex fragment: toggle it.
			- link: follow it
			- otherwise, refresh all inline images in current tree."
		(interactive "P")
		(let* ((context (org-element-context))
					 (type (org-element-type context)))
			;; skip over unimportant contexts
			(while (and context (memq type '(verbatim code bold italic underline strike-through subscript superscript)))
				(setq context (org-element-property :parent context)
							type (org-element-type context)))
			(pcase type
				(`headline
				 (cond ((memq (bound-and-true-p org-goto-map)
											(current-active-maps))
								(org-goto-ret))
							 ((and (fboundp 'toc-org-insert-toc)
										 (member "TOC" (org-get-tags)))
								(toc-org-insert-toc)
								(message "Updating table of contents"))
							 ((string= "ARCHIVE" (car-safe (org-get-tags)))
								(org-force-cycle-archived))
							 ((or (org-element-property :todo-type context)
										(org-element-property :scheduled context))
								(org-todo
								 (if (eq (org-element-property :todo-type context) 'done)
										 (or (car (+org-get-todo-keywords-for (org-element-property :todo-keyword context)))
												 'todo)
									 'done))))
				 ;; Update any metadata or inline previews in this subtree
				 (org-update-checkbox-count)
				 (org-update-parent-todo-statistics)
				 (when (and (fboundp 'toc-org-insert-toc)
										(member "TOC" (org-get-tags)))
					 (toc-org-insert-toc)
					 (message "Updating table of contents"))
				 (let* ((beg (if (org-before-first-heading-p)
												 (line-beginning-position)
											 (save-excursion (org-back-to-heading) (point))))
								(end (if (org-before-first-heading-p)
												 (line-end-position)
											 (save-excursion (org-end-of-subtree) (point))))
								(overlays (ignore-errors (overlays-in beg end)))
								(latex-overlays
								 (cl-find-if (lambda (o) (eq (overlay-get o 'org-overlay-type) 'org-latex-overlay))
														 overlays))
								(image-overlays
								 (cl-find-if (lambda (o) (overlay-get o 'org-image-overlay))
														 overlays)))
					 ;; (+org--toggle-inline-images-in-subtree beg end)
					 (if (or image-overlays latex-overlays)
							 (org-clear-latex-preview beg end)
						 (org--latex-preview-region beg end))))

				(`clock (org-clock-update-time-maybe))

				(`footnote-reference
				 (org-footnote-goto-definition (org-element-property :label context)))

				(`footnote-definition
				 (org-footnote-goto-previous-reference (org-element-property :label context)))

				((or `planning `timestamp)
				 (org-follow-timestamp-link))

				((or `table `table-row)
				 (if (org-at-TBLFM-p)
						 (org-table-calc-current-TBLFM)
					 (ignore-errors
						 (save-excursion
							 (goto-char (org-element-property :contents-begin context))
							 (org-call-with-arg 'org-table-recalculate (or arg t))))))

				(`table-cell
				 (org-table-blank-field)
				 (org-table-recalculate arg)
				 (when (and (string-empty-p (string-trim (org-table-get-field)))
										(bound-and-true-p evil-local-mode))
					 (evil-change-state 'insert)))

				(`babel-call
				 (org-babel-lob-execute-maybe))

				(`statistics-cookie
				 (save-excursion (org-update-statistics-cookies arg)))

				((or `src-block `inline-src-block)
				 (org-babel-execute-src-block arg))

				((or `latex-fragment `latex-environment)
				 (org-latex-preview arg))

				(`link
				 (let* ((lineage (org-element-lineage context '(link) t))
								(path (org-element-property :path lineage)))
					 (if (or (equal (org-element-property :type lineage) "img")
									 (and path (image-type-from-file-name path)))
							 (+org--toggle-inline-images-in-subtree
								(org-element-property :begin lineage)
								(org-element-property :end lineage))
						 (org-open-at-point arg))))

				((guard (org-element-property :checkbox (org-element-lineage context '(item) t)))
				 (let ((match (and (org-at-item-checkbox-p) (match-string 1))))
					 (org-toggle-checkbox (if (equal match "[ ]") '(16)))))

				(_
				 (if (or (org-in-regexp org-ts-regexp-both nil t)
								 (org-in-regexp org-tsr-regexp-both nil  t)
								 (org-in-regexp org-link-any-re nil t))
						 (call-interactively #'org-open-at-point)
					 (+org--toggle-inline-images-in-subtree
						(org-element-property :begin context)
						(org-element-property :end context))))))))
#+end_src
** evil-nerd-commenter
#+begin_src emacs-lisp
(use-package evil-nerd-commenter
	:general
	(general-nvmap
		"gc" 'evilnc-comment-operator)
	)
#+end_src
** projectile
#+begin_src emacs-lisp
(use-package projectile
	:demand
	:general
	(ab/leader-keys
		:states 'normal
		"p" '(:keymap projectile-command-map :which-key "project")
		"p <escape>" 'keyboard-escape-quit
		"p a" '(projectile-add-known-project :wk "add known"))
	:init
	(projectile-mode +1)
	;; Do not include straight repos (emacs packages) to project list
	(setq projectile-ignored-project-function
				(lambda (project-root)
					(string-prefix-p (expand-file-name "straight/" user-emacs-directory) project-root)))
	)
#+end_src
** restart-emacs
#+begin_src emacs-lisp
(use-package restart-emacs
	:general
	(ab/leader-keys
		"e" '(:ignore true :wk "emacs")
		"e e" '(ab/edit-emacs-config :wk "edit") 
		"e R" '(restart-emacs :wk "restart")
		"e L" '(ab/reload-emacs :wk "reload"))
	:init
	(defun ab/reload-emacs ()
		"Tangle the literate config and reload"
		(interactive)
		(require 'org)
		(org-babel-tangle-file "~/.emacs.d/init.org")
		(restart-emacs)
		)
  (defun ab/edit-emacs-config ()
		"Open the literate config"
		(interactive)
		(find-file "~/.emacs.d/init.org")))
#+end_src
* Future work
** Roadmap
*** DONE Install evil
*** DONE Configure font
*** DONE Configure basic settings
*** DONE Install bespoke-theme
[[https://github.com/mclear-tools/bespoke-themes]]
*** DONE Install magit
*** DONE Install bespoke-modeline
[[https://github.com/mclear-tools/bespoke-modeline]]

*** DONE Add help on SPC
*** DONE Fix agenda
*** DONE Org mode heading glyphs
*** DONE Variable pitch font in org
*** DONE Fix theme loading
*** DONE org-roam (cutom config for arnes notes)
*** TODO Fix window size on startup
*** TODO Add nyan status
*** TODO Add ivy
*** TODO Improve org-agenda usability
*** TODO Add ligature support
*** TODO Rust mode
** Cool emacs configs
- [[https://www.lucacambiaghi.com/vanilla-emacs/readme.html]]
- [[https://github.com/mclear-tools/dotemacs]]
- [[https://github.com/Artawower/.doom]]
- [[https://github.com/rougier/nano-emacs]]
- [[https://github.com/natecox/dotfiles/blob/master/workspaces/shared/symlinks/emacs/.emacs.d/nathancox.org]]
	
	
